apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "5"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"k8s-app":"ucp-metrics"},"name":"ucp-metrics","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"ucp-metrics"}},"template":{"metadata":{"labels":{"k8s-app":"ucp-metrics"}},"spec":{"containers":[{"args":["-c","while :; do curl -Ss --cacert ca.pem --cert cert.pem --key key.pem --output /inventory/inventory.json https://ucp-controller.kube-system.svc.cluster.local/metricsdiscovery; sleep 15; done"],"command":["/bin/sh"],"image":"docker/ucp-metrics:3.1.1","name":"ucp-metrics-inventory","securityContext":{"seLinuxOptions":{"type":"container_runtime_t"}},"volumeMounts":[{"mountPath":"/inventory","name":"inventory"},{"mountPath":"/node_certs","name":"node-certs","readOnly":true}],"workingDir":"/node_certs"},{"args":["--storage.tsdb.no-lockfile","--storage.tsdb.path=/data","--log.level=info","--storage.tsdb.retention=24h"],"command":["/bin/prometheus.sh"],"env":[{"name":"SCRAPE_INTERVAL","value":"1m"},{"name":"TLS_SERVER_NAME","value":"v993ypz4ogx70dqbct4uax53m"}],"image":"docker/ucp-metrics:3.1.1","livenessProbe":{"httpGet":{"path":"/status","port":"prometheus"},"periodSeconds":30,"timeoutSeconds":60},"name":"ucp-metrics-prometheus","ports":[{"containerPort":9090,"name":"prometheus"}],"securityContext":{"seLinuxOptions":{"type":"container_runtime_t"}},"volumeMounts":[{"mountPath":"/data","name":"data"},{"mountPath":"/inventory","name":"inventory","readOnly":true},{"mountPath":"/node_certs","name":"node-certs","readOnly":true}],"workingDir":"/etc/prometheus"},{"command":["/bin/proxy"],"image":"docker/ucp-metrics:3.1.1","name":"ucp-metrics-proxy","ports":[{"containerPort":8443,"name":"proxy"}],"readinessProbe":{"exec":{"command":["curl","--cacert","/node_certs/ca.pem","--cert","/node_certs/cert.pem","--key","/node_certs/key.pem","https://127.0.0.1:8443/status"]},"periodSeconds":30,"timeoutSeconds":60},"volumeMounts":[{"mountPath":"/node_certs","name":"node-certs","readOnly":true}]}],"nodeSelector":{"ucp-metrics":"w1"},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"hostPath":{"path":"/var/lib/docker/volumes/ucp-metrics-data/_data"},"name":"data"},{"emptyDir":{"medium":"Memory"},"name":"inventory"},{"hostPath":{"path":"/var/lib/docker/volumes/ucp-node-certs/_data"},"name":"node-certs"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
  creationTimestamp: null
  generation: 1
  labels:
    k8s-app: ucp-metrics
  name: prom-test
  selfLink: /apis/extensions/v1beta1/namespaces/monitoring/deployments/prom-test
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: ucp-metrics
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: ucp-metrics
    spec:
      containers:
      - args:
        - -c
        - while :; do curl -Ss --cacert ca.pem --cert cert.pem --key key.pem --output
          /inventory/inventory.json https://ucp-controller.kube-system.svc.cluster.local/metricsdiscovery;
          sleep 15; done
        command:
        - /bin/sh
        image: docker/ucp-metrics:3.1.1
        imagePullPolicy: IfNotPresent
        name: ucp-metrics-inventory
        resources: {}
        securityContext:
          seLinuxOptions:
            type: container_runtime_t
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /inventory
          name: inventory
        - mountPath: /node_certs
          name: node-certs
        workingDir: /node_certs
      - args:
        - --storage.tsdb.no-lockfile
        - --storage.tsdb.path=/data
        - --log.level=info
        command:
        - /bin/prometheus.sh
        env:
        - name: SCRAPE_INTERVAL
          value: 1m
        - name: TLS_SERVER_NAME
          value: v993ypz4ogx70dqbct4uax53m
        image: testimage:1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: prometheus
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 60
        name: ucp-metrics-prometheus
        ports:
        - containerPort: 9090
          name: prometheus
          protocol: TCP
        resources: {}
        securityContext:
          seLinuxOptions:
            type: container_runtime_t
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus-rules
          name: alertrules-volume
        - mountPath: /inventory
          name: inventory
        - mountPath: /node_certs
          name: node-certs
        workingDir: /etc/prometheus
      - command:
        - /bin/proxy
        image: docker/ucp-metrics:3.1.1
        imagePullPolicy: IfNotPresent
        name: ucp-metrics-proxy
        ports:
        - containerPort: 8443
          name: proxy
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - curl
            - --cacert
            - /node_certs/ca.pem
            - --cert
            - /node_certs/cert.pem
            - --key
            - /node_certs/key.pem
            - https://127.0.0.1:8443/status
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 60
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /node_certs
          name: node-certs
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/hostname: eeworer01
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: com.docker.ucp.manager
        operator: Exists
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: prometheus-pvc01
      - configMap:
          defaultMode: 420
          name: prometheus-rules
        name: alertrules-volume
      - emptyDir:
          medium: Memory
        name: inventory
      - hostPath:
          path: /var/lib/docker/volumes/ucp-node-certs/_data
          type: ""
        name: node-certs
status: {}
